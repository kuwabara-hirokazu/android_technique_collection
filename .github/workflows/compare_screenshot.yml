name: compare screenshot with comment

on:
  pull_request:
  workflow_dispatch: # 手動実行用

permissions: {}

jobs:
  compare-and-comment:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    permissions:
      contents: write # clone, push branches
      actions: write # upload/download artifacts
      pull-requests: write # comment on PRs

    steps:
      # 1. リポジトリをチェックアウト
      - name: Checkout
        uses: actions/checkout@v4

      # 2. JDK 17 をセットアップ
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      # 3. Gradle をセットアップ
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: wrapper

      # 4. 過去のスクリーンショットアーティファクトをダウンロード（必要ならエラー無視）
      - name: Download previous screenshots
        uses: dawidd6/action-download-artifact@v3
        continue-on-error: true
        with:
          name: screenshots
          workflow: store_screenshots.yml
          branch: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.ref || github.event.repository.default_branch }}

      # 4.1 アーティファクトの配置場所と内容を確認
      - name: Verify downloaded and extracted artifact
        shell: bash
        run: |
          echo "Searching for downloaded screenshots directory..."
          find . -type f | grep "screenshots" || echo "No screenshots found."
          echo "Project directory structure:"
          if command -v tree &> /dev/null; then
            tree .
          else
            echo "tree command not available."
          fi

          echo "Checking for extracted 'screenshots' directory..."
          if [ -d "./screenshots" ]; then
            echo "Found 'screenshots' directory in project root."
            echo "Listing contents of 'screenshots' directory:"
            ls -R ./screenshots
          else
            echo "'screenshots' directory not found in project root. Searching for its location..."
            extracted_dir=$(find . -type d -name "screenshots")
            if [ -n "$extracted_dir" ]; then
              echo "'screenshots' directory found at: $extracted_dir"
              echo "Listing contents of '$extracted_dir':"
              ls -R "$extracted_dir"
            else
              echo "No 'screenshots' directory found in the project."
            fi
          fi

      # 5. スクリーンショット比較テストを実行
      - name: Compare screenshot test
        id: compare-screenshot-test
        run: |
          ./gradlew compareRoborazziDebug --stacktrace

      # 6. スクリーンショット差分をアップロード
      - uses: actions/upload-artifact@v4
        if: ${{ always() }}
        with:
          name: screenshot-diff
          path: screenshots/compare/*
          retention-days: 10
          overwrite: true

      # 7. プルリクエスト番号を保存
      - name: Save PR number
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          mkdir -p ./pr
          echo ${{ github.event.number }} > ./pr/NR
      - uses: actions/upload-artifact@v4
        with:
          name: pr
          path: pr/

      # 8. スクリーンショット差分のアーティファクトをダウンロード
      - name: Download screenshot diff
        uses: dawidd6/action-download-artifact@v3
        with:
          name: screenshot-diff
          path: screenshot-diff

      # 9. 有効なファイルが存在するか確認
      - id: check-if-there-are-valid-files
        name: Check if there are valid files
        shell: bash
        run: |
          # Find all the files ending with _compare.png
          mapfile -t files_to_add < <(find ./screenshot-diff -type f -name "*_compare.png")

          # Check for invalid file names and add only valid ones
          exist_valid_files="false"
          for file in "${files_to_add[@]}"; do
            if [[ $file =~ ^[a-zA-Z0-9_./-]+$ ]]; then
              exist_valid_files="true"
              break
            fi
          done
          echo "exist_valid_files=$exist_valid_files" >> "$GITHUB_OUTPUT"

      # 10. 差分をコミットしてコンパニオンブランチにプッシュ
      - id: push-screenshot-diff
        shell: bash
        if: steps.check-if-there-are-valid-files.outputs.exist_valid_files == 'true'
        env:
          BRANCH_NAME: companion_${{ github.head_ref || github.run_id }}
        run: |
          files_to_add=$(find ./screenshot-diff -type f -name "*_compare.png")
          for file in $files_to_add; do
            git add "$file"
          done
          git config --global user.name ScreenshotBot
          git config --global user.email 41898282+github-actions[bot]@users.noreply.github.com
          git commit -m "Add screenshot diff"
          git push origin HEAD:"refs/heads/$BRANCH_NAME" -f

      # 11. 差分レポートを生成
      - id: generate-diff-reports
        name: Generate diff reports
        if: steps.check-if-there-are-valid-files.outputs.exist_valid_files == 'true'
        shell: bash
        env:
          BRANCH_NAME: companion_${{ github.head_ref || github.run_id }}
        run: |
          files=$(find ./screenshot-diff -type f -name "*_compare.png")
          delimiter="$(openssl rand -hex 8)"
          {
            echo "reports<<${delimiter}"
            echo "| ファイル名 | イメージ |"
            echo "|-------|-------|"
          } >> "$GITHUB_OUTPUT"
          for file in $files; do
            fileName=$(basename "$file" | sed -r 's/(.{20})/\1<br>/g')
            echo "| [$fileName](https://github.com/${{ github.repository }}/blob/$BRANCH_NAME/screenshot-diff/${file#./screenshot-diff/}) | ![](https://github.com/${{ github.repository }}/blob/$BRANCH_NAME/screenshot-diff/${file#./screenshot-diff/}?raw=true) |" >> "$GITHUB_OUTPUT"
          done
          echo "${delimiter}" >> "$GITHUB_OUTPUT"

      # 12. プルリクエストにコメントを追加または更新
      - name: Add or update comment on PR
        uses: peter-evans/create-or-update-comment@v4
        if: steps.generate-diff-reports.outputs.reports != ''
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          issue-number: ${{ github.event.number }}
          body: ${{ steps.generate-diff-reports.outputs.reports }}
          edit-mode: replace

      # 13. 古いコンパニオンブランチのクリーンアップ
      - name: Cleanup outdated companion branches
        run: |
          git branch -r --format="%(refname:lstrip=3)" | grep companion_ | while read -r branch; do
            last_commit_date_timestamp=$(git log -1 --format=%ct "origin/$branch")
            now_timestamp=$(date +%s)
            if [ $((now_timestamp - last_commit_date_timestamp)) -gt 2592000 ]; then
              git push origin --delete "$branch"
            fi
          done
