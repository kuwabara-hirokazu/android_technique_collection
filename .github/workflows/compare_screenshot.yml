name: compare screenshot with comment

on:
  pull_request:

permissions: {}

jobs:
  compare-and-comment:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    permissions:
      contents: write # clone, push branches
      pull-requests: write # comment on PRs

    steps:
      # 1. リポジトリをチェックアウト
      - name: Checkout
        uses: actions/checkout@v4

      # 2. JDK 17 をセットアップ
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 17

      # 3. Gradle をセットアップ
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3
        with:
          gradle-version: wrapper

      # 4. 過去のスクリーンショットアーティファクトをダウンロード（エラー無視）
      - name: Download previous screenshots
        uses: dawidd6/action-download-artifact@v3
        continue-on-error: true
        with:
          name: screenshots
          workflow: store_screenshots.yml
          branch: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.ref || github.event.repository.default_branch }}

      # 5. ファイルの整理
      - name: Organize downloaded files
        run: |
          mkdir -p screenshots
          find . -maxdepth 1 -name "*.png" -exec mv {} screenshots/ \; || echo "No PNG files to move."

      # 6. スクリーンショット比較テストを実行
      - name: Compare screenshot test
        id: compare-screenshot-test
        run: |
          ./gradlew compareRoborazziDebug --stacktrace

      # 7. スクリーンショット差分を保存
      - name: Save screenshot diff
        run: |
          mkdir -p screenshot-diff
          find **/build/outputs/roborazzi/ -type f -exec cp {} screenshot-diff/ \; || echo "No screenshot diff files found to save."

      # 8. 有効なファイルが存在するか確認
      - id: check-if-there-are-valid-files
        name: Check if there are valid files
        shell: bash
        run: |
          mapfile -t files_to_add < <(find ./screenshot-diff -type f -name "*_compare.png")
          exist_valid_files="false"
          for file in "${files_to_add[@]}"; do
            if [[ $file =~ ^[a-zA-Z0-9_./-]+$ ]]; then
              exist_valid_files="true"
              break
            fi
          done
          echo "exist_valid_files=$exist_valid_files" >> "$GITHUB_OUTPUT"

      # 9. 差分をコミットしてコンパニオンブランチにプッシュ
      - id: push-screenshot-diff
        shell: bash
        if: steps.check-if-there-are-valid-files.outputs.exist_valid_files == 'true'
        env:
          BRANCH_NAME: companion_${{ github.head_ref || github.run_id }}
        run: |
          files_to_add=$(find ./screenshot-diff -type f -name "*_compare.png")
          for file in $files_to_add; do
            git add "$file"
          done
          git config --global user.name ScreenshotBot
          git config --global user.email 41898282+github-actions[bot]@users.noreply.github.com
          git commit -m "Add screenshot diff"
          git push origin HEAD:"refs/heads/$BRANCH_NAME" -f

      # 10. 差分レポートを生成
      - id: generate-diff-reports
        name: Generate diff reports
        if: steps.check-if-there-are-valid-files.outputs.exist_valid_files == 'true'
        shell: bash
        env:
          BRANCH_NAME: companion_${{ github.head_ref || github.run_id }}
        run: |
          files=$(find ./screenshot-diff -type f -name "*_compare.png")
          delimiter="$(openssl rand -hex 8)"
          branch_name="${{ github.head_ref || github.run_id }}"
          repo_name="${{ github.repository }}"
          timestamp=$(date +%s)
          temp_output_file=$(mktemp)
          {
            echo "reports<<${delimiter}"
            echo "<!-- screenshot-diff-comment -->"
            echo "| ファイル名 | イメージ |"
            echo "|-------|-------|"
          } > "$temp_output_file"
          for file in $files; do
            fileName=$(basename "$file" | sed -r 's/(.{20})/\1<br>/g')
            echo "| [$fileName](https://github.com/${repo_name}/blob/${branch_name}/screenshot-diff/${file#./screenshot-diff/}) | ![Image](https://github.com/${repo_name}/blob/${branch_name}/screenshot-diff/${file#./screenshot-diff/}?raw=true&timestamp=${timestamp}) |" >> "$temp_output_file"
          done
          echo "${delimiter}" >> "$temp_output_file"
          cat "$temp_output_file" >> "$GITHUB_OUTPUT"

      # 11. 既存のコメントを検索
      - id: find-comment
        name: Find existing comment
        uses: peter-evans/find-comment@v3
        with:
          issue-number: ${{ github.event.number }}
          body-includes: "<!-- screenshot-diff-comment -->" # 一意の識別子で既存コメントを検索

      # 12. プルリクエストにコメントを追加または更新
      - name: Add or update comment on PR
        uses: peter-evans/create-or-update-comment@v4
        if: steps.generate-diff-reports.outputs.reports != ''
        with:
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ github.event.number }}
          body: ${{ steps.generate-diff-reports.outputs.reports }}
          edit-mode: replace

      # 13. 古いコンパニオンブランチのクリーンアップ
      - name: Cleanup outdated companion branches
        run: |
          git branch -r --format="%(refname:lstrip=3)" | grep companion_ | while read -r branch; do
            last_commit_date_timestamp=$(git log -1 --format=%ct "origin/$branch")
            now_timestamp=$(date +%s)
            if [ $((now_timestamp - last_commit_date_timestamp)) -gt 2592000 ]; then
              git push origin --delete "$branch"
            fi
          done
